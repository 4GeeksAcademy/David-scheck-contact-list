================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-08-10T14:45:09.637Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.devcontainer/
  devcontainer.json
docs/
  assets/
    greeting.py
  deploy.png
src/
  js/
    component/
      Contact.jsx
      Modal.jsx
    store/
      appContext.js
      flux.js
    views/
      addContact.js
      editContact.js
      home.js
      single.js
    index.js
    layout.js
  styles/
    index.css
.env.example
.eslintrc
.gitignore
.gitpod.yml
.htaccess
4geeks.ico
CHANGELOG.md
package.json
README.md
template.html
vercel.json
webpack.common.js
webpack.dev.js
webpack.prod.js

================================================================
Repository Files
================================================================

================
File: .devcontainer/devcontainer.json
================
// For format details, see https://aka.ms/devcontainer.json. For config options, see the
// README at: https://github.com/devcontainers/templates/tree/main/src/javascript-node
{
	"name": "Node.js",
	// Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile
	"image": "mcr.microsoft.com/devcontainers/python:0-3.10",
	"features": {
		"ghcr.io/devcontainers/features/node:1": {
			"nodeGypDependencies": true,
			"version": "16"
		}
	},

	"customizations": {
		"vscode": {
			"settings": {
				"editor.defaultFormatter": "esbenp.prettier-vscode",
				"workbench.editorAssociations": {   
					"*.md": "vscode.markdown.preview.editor"
				}
			},
		}
	},

	"onCreateCommand": "npm install && cp .env.example .env",

	// Features to add to the dev container. More info: https://containers.dev/features.
	// "features": {},

	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	// "forwardPorts": [],

	// Use 'postCreateCommand' to run commands after the container is created.
	"postCreateCommand": "python docs/assets/greeting.py",

	// Configure tool-specific properties.
	// "customizations": {},

	// Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.
	// "remoteUser": "root"
}

================
File: docs/assets/greeting.py
================
def blue(_str):
    return f"\033[0;33m{_str}\033[0m"

print(f"""
Hello 😁 ! Use the terminal to code!

1. Start the dev server by running  {blue("$ npm run start")}
2. You can find a video tutorial and explanation on the README.md file.
3. Always read the terminal output, it's your best tool for debugging!
""")

================
File: src/js/component/Contact.jsx
================
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Link } from "react-router-dom";
import Modal from "./Modal.jsx";

const Contact = ({contact, onDelete}) => {
    const [showModal, setShowModal] = useState(false);

    const handleDelete = () => {
        setShowModal(true);
    };

    const handleConfirmDelete = () => {
        onDelete(contact.id);
        setShowModal(false);
    };

    return (
        <div className="card mb-3">
            <div className="card-body">
                <div className="row">
                    <div className="col-2">
                    <img src="https://cdn.icon-icons.com/icons2/2438/PNG/512/boy_avatar_icon_148455.png" className="img-fluid rounded-circle" alt="Profile" />
                    </div>
                    <div className="col-10">
                        <h5 className="card-title">{contact.name}</h5>
                        <p className="card-text"><i className="fas fa-map-marker-alt"></i> {contact.address} </p>
                        <p className="card-text"><i className="fas fa-phone"></i> {contact.phone}</p>
                        <p className="card-text"><i className="fas fa-envelope"></i> {contact.email}</p>
                        <Link to={`/EditContact/${contact.id}`}>
                            <button className="btn btn-primary me-2">Edit</button>
                        </Link>
                        <button className="btn btn-danger" onClick={handleDelete}>Delete</button>
                    </div>
                </div>
            </div>
            <Modal show={showModal} onClose={() => setShowModal(false)} onConfirm={handleConfirmDelete} />
        </div>
    );
};

Contact.propTypes = {
    contact: PropTypes.object.isRequired,
    onDelete: PropTypes.func.isRequired,
};

export default Contact;

================
File: src/js/component/Modal.jsx
================
import React from "react";
import PropTypes from "prop-types";

const Modal = ({ show, onClose, onConfirm }) => {
    return (
        show &&
        <div className="modal show d-block" tabIndex="-1" role="dialog">
            <div className="modal-dialog" role="document">
                <div className="modal-content">
                    <div className="modal-header">
                        <h5 className="modal-title">Delete Contact</h5>
                        <button type="button" className="close" onClick={onClose} aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div className="modal-body">
                        <p>Are you sure you want to delete this contact?</p>
                    </div>
                    <div className="modal-footer">
                        <button type="button" className="btn btn-secondary" onClick={onClose}>Back</button>
                        <button type="button" className="btn btn-danger" onClick={onConfirm}>Confirm</button>
                    </div>
                </div>
            </div>
        </div>
    );
};

Modal.propTypes = {
    show: PropTypes.bool.isRequired,
    onClose: PropTypes.func.isRequired,
    onConfirm: PropTypes.func.isRequired,
};

export default Modal;

================
File: src/js/store/appContext.js
================
import React, { useState, useEffect } from "react";
import getState from "./flux.js";

// Don't change, here is where we initialize our context, by default it's just going to be null.
export const Context = React.createContext(null);

// This function injects the global store to any view/component where you want to use it, we will inject the context to layout.js, you can see it here:
// https://github.com/4GeeksAcademy/react-hello-webapp/blob/master/src/js/layout.js#L35
const injectContext = PassedComponent => {
	const StoreWrapper = props => {
		//this will be passed as the contenxt value
		const [state, setState] = useState(
			getState({
				getStore: () => state.store,
				getActions: () => state.actions,
				setStore: updatedStore =>
					setState({
						store: Object.assign(state.store, updatedStore),
						actions: { ...state.actions }
					})
			})
		);

		useEffect(() => {
			/**
			 * EDIT THIS!
			 * This function is the equivalent to "window.onLoad", it only runs once on the entire application lifetime
			 * you should do your ajax requests or fetch api requests here. Do not use setState() to save data in the
			 * store, instead use actions, like this:
			 *
			 * state.actions.loadSomeData(); <---- calling this function from the flux.js actions
			 *
			 **/
		}, []);

		// The initial value for the context is not null anymore, but the current state of this component,
		// the context will now have a getStore, getActions and setStore functions available, because they were declared
		// on the state of this component
		return (
			<Context.Provider value={state}>
				<PassedComponent {...props} />
			</Context.Provider>
		);
	};
	return StoreWrapper;
};

export default injectContext;

================
File: src/js/store/flux.js
================
const getState = ({ getStore, getActions, setStore }) => {
	return {
		store: {
			contacts: [],
			agenda: "davidscheck"
		},
		actions: {
			// Use getActions to call a function within a fuction
			addContact: async (contact) => {
				const agendaName = getStore().agenda;
				try {
					const response = await fetch(`https://playground.4geeks.com/contact/agendas/${agendaName}/contacts`, {
						method: "POST",
						body: JSON.stringify(contact),
						headers: {
							"Content-Type": "application/json"
						}
					});
					if (!response.ok) {
						throw Error("Error creating contact");
					}
					const data = await response.json();
					setStore({ contacts: [...getStore().contacts, data] });
				} catch (error) {
					console.error("Error adding contact:", error);
				}
			},


			getContacts: async () => {
				const agendaName = getStore().agenda;
				try {
					const response = await fetch(`https://playground.4geeks.com/contact/agendas/${agendaName}`);
						if (response.status === 404) {
							await getActions().createAgenda();
							await getActions().getContacts();
						}
						if (!response.ok) {
							throw Error("Error fetching contacts");
						}
						const data = await response.json();
						setStore({ contacts: data.contacts});
				} catch (error) {
					console.error("Error getting contacts:", error);
				}
			},

			editContact: async (contact, id) => {
				const agendaName = getStore().agenda;
				try {
					const response = await fetch(`https://playground.4geeks.com/contact/agendas/${agendaName}/contacts/${id}`, {
						method: "PUT",
						body: JSON.stringify(contact),
						headers: {
							"Content-Type": "application/json"
						}
					});
				if (response.ok) {
					const actions = getActions();
					actions.getContacts();
				} else {
					throw Error("Error updating contact");
				} 
			} catch (error) {
					console.error("Error editing contact:", error);
					throw error;
				}
			},

			createAgenda: async () => {
				const agendaName = getStore().agenda;
				try {
					const response = await fetch(`https://playground.4geeks.com/contact/agendas/${agendaName}`, {
						method: "POST",
						body: JSON.stringify({}),
						headers: {
							"Content-Type": "application/json"
						}
					});
					if (response.ok) {
						const newAgenda = await response.json();
						console.log("agenda created;", newAgenda);
					}
				} catch (error) {
					console.error("Error creating agenda:", error);
				}
			},

			deleteContact: async (id) => {
				const agendaName= getStore().agenda;
				try {
					const response = await fetch (`https://playground.4geeks.com/contact/agendas/${agendaName}/contacts/${id}`, {
						method: "DELETE"
					});
					if (response.ok) {
						getActions().getContacts();
						const contactsUpdated = getStore().contacts.filter(contact => contact.id != id);
						setStore({ contacts: contactsUpdated});
					} else {
						throw Error("Error deleting contact");
					}
				} catch (error) {
					console.error("Error deleting contact:", error);
				}
			},
		
		},
	};
};


		export default getState;

================
File: src/js/views/addContact.js
================
import React, { useContext, useState } from "react";
import { Context } from "../store/appContext";
import { Link, useNavigate } from "react-router-dom";
import "../../styles/home.css";

export const AddContact = () => {
    const { actions } = useContext(Context);
    const [data, setData] = useState({});
    const navigate = useNavigate();

    const handleChange = (e) => {
        setData({
            ...data,
            [e.target.name]: e.target.value
        });
    };

    const handleSubmit = () => {
        actions.addContact(data);
        navigate("/");
    };

    return (
        <div className="container">
            <div className="d-flex justify-content-center align-items-center fs-1">
                <p>Add new contact</p>
            </div>
            <form>
                <div className="mb-3">
                    <label htmlFor="Name" className="form-label fw-bold">Full Name</label>
                    <input type="text" name="name" className="form-control" id="Name" placeholder="Full Name"
                        onChange={handleChange}
                    />
                </div>
                <div className="mb-3">
                    <label htmlFor="Email" className="form-label fw-bold">Email Testing Update</label>
                    <input type="email" name="email" className="form-control" id="Email" placeholder="Enter email"
                        onChange={handleChange}
                    />
                </div>
                <div className="mb-3">
                    <label htmlFor="Phone" className="form-label fw-bold">Phone</label>
                    <input type="text" name="phone" className="form-control" id="Phone" placeholder="Enter phone"
                        onChange={handleChange} />
                </div>
                <div className="mb-3">
                    <label htmlFor="Address" className="form-label fw-bold">Address</label>
                    <input type="text" name="address" className="form-control" id="Address" placeholder="Enter address"
                        onChange={handleChange} />
                </div>
                <button type="button" className="btn btn-primary w-100" onClick={handleSubmit}>Save</button>
                <Link to="/">
                    <button className="btn btn-secondary w-100 mt-2">Back to contacts</button>
                </Link>
            </form>
        </div>
    );
};

================
File: src/js/views/editContact.js
================
import React, { useContext, useEffect, useState } from "react";
import "../../styles/home.css";
import { Link, useParams } from "react-router-dom";
import { Context } from "../store/appContext";

export const EditContact = () => {
    const { store, actions } = useContext(Context);
    const [edit, setEdit] = useState({
        name: "",
        email: "",
        phone: "",
        address: "",
    });

    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);
    const params = useParams();
    const contactId = parseInt(params.id); // Convert contactID to and integer

    useEffect(() => {
        const contact = store.contacts.find(contact => contact.id === contactId);
        if (contact) {
            setEdit(contact);
            setIsLoading(false);
        } else {
            setError("Contact not found");
            setIsLoading(false);
        }
    }, [contactId, store.contacts]);
    
    const handleChange = (e) => {
        setEdit({
            ...edit,
            [e.target.name]: e.target.value
        });
    };

    const handleSubmit = async () => {
        try {
            await actions.editContact(edit, contactId);
        } catch (error) {
            console.error("Error updating contact:", error);
            setError(error.message);
        }
    };

    if (isLoading) {
        return <div>Loading...</div>;
    }

    if (error) {
        return <div>Error: {error}</div>;
    }

    return (
        <div className="container">
            <div className="d-flex justify-content-center align-items-center fs-1">
                <p>Edit Contact</p>
            </div>
            <form>
                <div className="mb-3">
                    <label htmlFor="Name" className="form-label fw-bold">Full Name</label>
                    <input type="text" className="form-control" id="Name" value={edit.name}
                        name="name"
                        onChange={handleChange} />
                </div>
                <div className="mb-3">
                    <label htmlFor="Email" className="form-label fw-bold">Email</label>
                    <input type="email" className="form-control" id="Email" value={edit.email}
                        name="email"
                        onChange={handleChange} />
                </div>
                <div className="mb-3">
                    <label htmlFor="Phone" className="form-label fw-bold">Phone</label>
                    <input type="text" className="form-control" id="Phone" value={edit.phone}
                        name="phone"
                        onChange={handleChange} />
                </div>
                <div className="mb-3">
                    <label htmlFor="Address" className="form-label fw-bold">Address</label>
                    <input type="text" className="form-control" id="Address" value={edit.address}
                        name="address"
                        onChange={handleChange} />
                </div>
                <Link to="/">
                    <button type="button" className="btn btn-primary w-100" onClick={handleSubmit}>
                        Save Changes
                    </button>
                </Link>
                <Link to="/">
                    <a>or get back to contacts</a>
                </Link>
            </form>
        </div>
    );
}

================
File: src/js/views/home.js
================
import React, { useContext, useEffect } from "react";
import "../../styles/home.css";
import { Link } from "react-router-dom";
import { Context } from "../store/appContext";
import Contact  from "../component/Contact.jsx";

export const Home = () => {
	const { store, actions } = useContext(Context);

	useEffect(() => {
		const startAgenda = async () => {
			await actions.getContacts();
		};

		startAgenda();
	}, []);

	return (
		<div className="container">
            <div className="mb-4 d-flex">
                <Link className="ms-auto" to="/AddContact">
                    <button className="btn btn-success">Add contact</button>
                </Link>
            </div>
			<ul className="list-unstyled">
				{store.contacts && store.contacts.map((contact,index) => (
					<Contact key={index} contact={contact} onDelete={() => actions.deleteContact(contact.id)} />
				))}
			</ul>
		</div>
	);
};

export default Home;

================
File: src/js/views/single.js
================
import React, { useContext } from "react";
import PropTypes from "prop-types";
import { Link, useParams } from "react-router-dom";
import { Context } from "../store/appContext";

export const Single = PropTypes => {
	const { store } = useContext(Context);
	const params = useParams();
	return (
		<div className="jumbotron">
			<h1 className="display-4">This will show the demo element: {store.demo[params.theid].title}</h1>

			<hr className="my-4" />

			<Link to="/">
				<span className="btn btn-primary btn-lg" href="#" role="button">
					Back home
				</span>
			</Link>
		</div>
	);
};

Single.propTypes = {
	match: PropTypes.object
};

================
File: src/js/index.js
================
//import react into the bundle
import React from 'react'
import {createRoot} from 'react-dom/client'

//include your index.scss file into the bundle
import "../styles/index.css";

//import your own components
import Layout from './layout.js'

//
const root = createRoot(document.querySelector("#app"))

//render your react application
root.render(<Layout/>)

================
File: src/js/layout.js
================
import React from "react";
import { BrowserRouter, Route, Routes } from "react-router-dom";
import { Home } from "./views/home";
import { AddContact } from "./views/addContact";
import { EditContact } from "./views/editContact";
import injectContext from "./store/appContext";

const Layout = () => {
    const basename = process.env.BASENAME || "";

    return (
        <div>
            <BrowserRouter basename={basename}>
                <Routes>
                    <Route path="/" element={<Home />} />
                    <Route path="/AddContact" element={<AddContact />} />
                    <Route path="/EditContact/:id" element={<EditContact />} />
                    <Route path="*" element={<h1>Not found!</h1>} />
                </Routes>
            </BrowserRouter>
        </div>
    );
};

export default injectContext(Layout);

================
File: src/styles/index.css
================
/* 
    General Styles
*/

body {
    background: rgb(rgba(33. 190, 230, 0.486),);
}

================
File: .env.example
================
BASENAME=/

================
File: .eslintrc
================
{
  "parser": "@babel/eslint-parser",
  "plugins": [
    "react"
  ],
  "env": {
    "browser": true,
    "es6": true
  },
  "extends": [ "plugin:react/recommended"],
  "rules": {
    "strict":0,
    "no-unused-vars": 0,
    "no-console": 1,
    "no-mixed-spaces-and-tabs": 0,
    "no-debugger": 0, 
    "semi": ["error", "always"],
    "allowImportExportEverywhere": false,
    "indent": "off",
    "react/jsx-indent": "off",
    "react/jsx-indent-props": "off",
    "comma-dangle": [1, { //when to use the last comma
        "arrays": "never",
        "objects": "never",
        "imports": "never",
        "exports": "never",
        "functions": "ignore",
    }],
    "react/prop-types": [2]
  }
}

================
File: .gitignore
================
# ignore all files starting with .
.*

# track this file .gitignore (i.e. do NOT ignore it)
!.gitignore
!.github
!.vscode
php_errorlog
.log

# track this file .gitignore (i.e. do NOT ignore it)
!composer.json
!webpack.config.js
!package.json
!webpack.production.js
!webpack.development.js

# track readme.md in the root (i.e. do NOT ignore it)
!README.md

# ignore OS generated files
ehthumbs.db
Thumbs.db

# ignore Editor files
*.sublime-project
*.sublime-workspace
*.komodoproject

# ignore log files and databases
*.log
*.sql
*.sqlite

# ignore compiled files
*.com
*.class
*.dll
*.exe
*.o
*.so

# ignore packaged files
*.7z
*.dmg
*.gz
*.iso
*.jar
*.rar
*.tar
*.zip

# ignore node/grunt dependency directories
node_modules/

public/

# ignore the dist directory were our bundle files are going to be
!.gitkeep
!.devcontainer
!.devcontainer/*
!.gitpod.yml
!.htaccess
!.eslintrc
!.env.example
.now
.vercel

================
File: .gitpod.yml
================
ports:
    - port: 3000
      onOpen: open-browser
tasks:
    - init: >
        npm install &&
        cp .env.example .env
      command: >
        python docs/assets/greeting.py

vscode:
  extensions:
    - esbenp.prettier-vscode

================
File: .htaccess
================
<IfModule mod_rewrite.c>

  RewriteEngine On
  RewriteBase /
  RewriteRule ^index\.html$ - [L]
  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteCond %{REQUEST_FILENAME} !-d
  RewriteCond %{REQUEST_FILENAME} !-l
  RewriteRule . /index.html [L]

</IfModule>

================
File: CHANGELOG.md
================
### 3 July 7, 2020

- Updated to React Router v5.2.0 with new Syntax and Hooks: No more usaged of the `component` property on the Route, new hooks useHistory and useLocation.

### Oct 23, 2020

- Added support for async/wait using the `@babel/plugin-transform-runtime` plugin. No more regenerator/runtime issue.
- Replaced now.json with vercel.json

### December 9, 2021

- Support for node 16 and droppped 14.
- Updated all libraries to the latest
- Now the prettier us being used as a vscode plugin instead.
- Dropped eslint (for now)

================
File: package.json
================
{
	"name": "react-hello-webapp",
	"engines": {
		"node": "16.x"
	},
	"version": "1.0.1",
	"description": "",
	"main": "index.js",
	"scripts": {
		"start": "webpack-dev-server --config webpack.dev.js --host 0.0.0.0 --port 3000",
		"build": "webpack --config webpack.prod.js",
		"deploy": "node deploy-to-github.js"
	},
	"author": {
		"name": "Alejandro Sanchez",
		"url": "http://alesanchezr.com/"
	},
	"contributors": [
		{
			"name": "Alejandro Sanchez",
			"url": "http://alesanchezr.com/"
		},
		{
			"name": "Ignacio Cordoba",
			"url": "http://github.com/nachovz"
		}
	],
	"license": "ISC",
	"devDependencies": {
		"@babel/cli": "^7.16.0",
		"@babel/core": "^7.16.0",
		"@babel/plugin-proposal-class-properties": "^7.16.0",
		"@babel/plugin-transform-runtime": "^7.16.4",
		"@babel/preset-env": "^7.16.4",
		"@babel/preset-react": "^7.16.0",
		"@babel/runtime": "^7.16.3",
		"babel-eslint": "^10.1.0",
		"babel-loader": "^8.2.3",
		"babel-plugin-transform-class-properties": "^6.24.1",
		"bc-console": "0.0.2",
		"css-loader": "^6.5.1",
		"dotenv-webpack": "^7.0.3",
		"envfile": "^6.17.0",
		"error-overlay-webpack-plugin": "^1.0.0",
		"eslint": "^8.4.0",
		"eslint-plugin-react": "^7.27.1",
		"eslint-webpack-plugin": "^3.1.1",
		"file-loader": "^6.2.0",
		"gh-pages": "^3.2.3",
		"html-loader": "^3.0.1",
		"html-webpack-plugin": "^5.5.0",
		"parse-github-url": "^1.0.2",
		"prettier": "^2.5.1",
		"remote-origin-url": "^2.0.0",
		"style-loader": "^3.3.1",
		"webpack": "^5.65.0",
		"webpack-cli": "^4.9.1",
		"webpack-dev-server": "^4.6.0",
		"webpack-merge": "^5.8.0"
	},
	"babel": {
		"presets": [
			"@babel/preset-env",
			"@babel/preset-react"
		],
		"plugins": [
			"@babel/plugin-proposal-class-properties",
			[
				"@babel/plugin-transform-runtime",
				{
					"regenerator": true
				}
			]
		]
	},
	"dependencies": {
		"prop-types": "^15.7.2",
		"query-string": "^7.0.1",
		"react": "^18.2.0",
		"react-dom": "^18.2.0",
		"react-polyfills": "0.0.1",
		"react-router": "^6.0.2",
		"react-router-dom": "^6.4.3"
	}
}

================
File: README.md
================
# WebApp boilerplate with React JS
[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io#https://github.com/4GeeksAcademy/react-hello-webapp.git)

<p align="center">
<a href="https://www.loom.com/share/f37c6838b3f1496c95111e515e83dd9b"><img src="https://github.com/4GeeksAcademy/react-hello-webapp/blob/master/src/img/how-to.png?raw=true" /></a>
</p>


### Requirements:
- Make sure you are using node version 10

1. Install the packages:
```
$ npm install
```
2. Create a .env file:
```
$ cp .env.example .env
```
3. Start coding! and the webpack dev server with live reload, for windows, mac, linux or Gitpod:

```bash
$ npm run start
```

### Styles
You can update the `styles/index.css` or create new `.css` files inside `styles/` and import them into your current scss or js files depending on your needs.

### Components
Add more files into your `./src/js/components` or styles folder as you need them and import them into your current files as needed.

**Note (New changes)**: Components have been converted into functions to support the use of hooks:
* Instead of a class component, we're using a `const` function.
* Class `constructor` and `state` have been replaced by `useState()` hooks.
* `componentDidMount()` was replaced by `useEffect({}, [])` - It runs at mount thanks to the second parameter (`[]`).
* `Actions` and `Store` still work the same way.

```jsx
// Previous "Class Oriented"
export class Demo extends React.Component {
	constructor(props) {
		super(props);

		this.state = getState('code here');
	}
}

// New "Functional Oriented"
export const Demo = () => (
	const [state, setState] = getState('code here'); //using the state (if needed)
  const { store, actions } = useContext(Context); // using the context (if needed)

);
```

💡Note: There is an example using the Context API inside `views/demo.js`;

### Views (Components)
Add more files into your `./src/js/views` and import them in `./src/js/layout.jsx`.

### Context
This boilerplate comes with a centralized general Context API. The file `./src/js/store/flux.js` has a base structure for the store, we encourage you to change it and adapt it to your needs.

React Context [docs](https://reactjs.org/docs/context.html)
BreathCode Lesson [view](https://content.breatheco.de/lesson/react-hooks-explained)

The `Provider` is already set. You can consume from any component using the useContext hook to get the `store` and `actions` from the Context. Check `/views/demo.js` to see a demo.

```jsx
import { Context } from "../store/appContext";
const MyComponentSuper = () => {
  //here you use useContext to get store and actions
  const { store, actions } = useContext(Context);
  return <div>{/* you can use your actions or store inside the html */}</div>
}
```

## Publish your website!

1. **Vercel:** The FREE recomended hosting provider is [vercel.com](https://vercel.com/), you can deploy in 1 minutes by typing the following 2 commands:

Login (you need to have an account):
```sh
$ npm i vercel -g && vercel login
```
Deploy:
```sh
$ vercel --prod
```
✎ Note: If you don't have an account just go to vercel.com, create a account and come back here.

![Vercel example procedure to deploy](https://github.com/4GeeksAcademy/react-hello-webapp/blob/4b530ba091a981d3916cc6e960e370decaf2e234/docs/deploy.png?raw=true)

2. **Github Pages:** This boilerplate is 100% compatible with the free github pages hosting.
To publish your website you need to push your code to your github repository and run the following command after:
```sh
$ npm run deploy
```
Note: You will need to [configure github pages for the branch gh-pages](https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/#enabling-github-pages-to-publish-your-site-from-master-or-gh-pages)

## Contributors

This template was built as part of the 4Geeks Academy [Coding Bootcamp](https://4geeksacademy.com/us/coding-bootcamp) by [Alejandro Sanchez](https://twitter.com/alesanchezr) and many other contributors. Find out more about our [Full Stack Developer Course](https://4geeksacademy.com/us/coding-bootcamps/part-time-full-stack-developer), and [Data Science Bootcamp](https://4geeksacademy.com/us/coding-bootcamps/datascience-machine-learning).

================
File: template.html
================
<!DOCTYPE html>
<html class="h-100">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta charset="UTF-8">
        <title>Hello Rigo with Vanilla.js</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
        <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.2.0/css/all.css" integrity="sha384-hWVjflwFxL6sNzntih27bfxkr27PmbbK/iSvJ+a4+0owXq79v+lsFkW54bOGbiDQ" crossorigin="anonymous">
    </head>
    <body class="h-100">
        <div id="app" class="h-100"></div>
        <!-- Many of bootstrap components require the use of JavaScript to function -->
        <!-- Popper and BootStrap JS -->
        <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js" integrity="sha384-7+zCNj/IqJ95wo16oMtfsKbZ9ccEh31eOz1HGyDuCQ6wgnyJNSYdrPa03rtR1zdB" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js" integrity="sha384-QJHtvGhmr9XOIpI6YVutG+2QOK9T+ZnN4kzFN1RtK3zEFEIsxhlmWl5/YESvpZ13" crossorigin="anonymous"></script>
    </body>
</html>

================
File: vercel.json
================
{
  "version": 2,
  "builds": [
    {
      "src": "package.json",
      "use": "@now/static-build",
      "config": { "distDir": "public" }
    }
  ],
  
  "routes": [
    {
      "src":"/.*bundle.js$",
      "headers": { "cache-control": "s-maxage=31536000,immutable" },
      "dest":"/bundle.js"
    },
    {
      "src":"/(.+)\\.([a-zA-Z]{2,4})$",
      "headers": { "cache-control": "s-maxage=31536000,immutable" },
      "dest":"/$1.$2"
    },
    {
      "src": "/(.*)",
      "headers": { "cache-control": "s-maxage=0" },
      "dest": "/index.html"
    }
  ]
}

================
File: webpack.common.js
================
const webpack = require('webpack');
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const Dotenv = require('dotenv-webpack');

module.exports = {
  entry: [
    './src/js/index.js'
  ],
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'public'),
    publicPath: '/'
  },
  module: {
    rules: [
        {
          test: /\.(js|jsx)$/,
          exclude: /node_modules/,
          use: ['babel-loader']
        },
        {
          test: /\.(css)$/, use: [{
              loader: "style-loader" // creates style nodes from JS strings
          }, {
              loader: "css-loader" // translates CSS into CommonJS
          }]
        }, //css only files
        {
          test: /\.(png|svg|jpg|gif|jpeg|webp)$/, use: {
            loader: 'file-loader',
            options: { name: '[name].[ext]' }
          }
        }, //for images
        { test: /\.woff($|\?)|\.woff2($|\?)|\.ttf($|\?)|\.eot($|\?)|\.svg($|\?)/, use: ['file-loader'] } //for fonts
    ]
  },
  resolve: {
    extensions: ['*', '.js']
  },
  plugins: [
    new HtmlWebpackPlugin({
        favicon: '4geeks.ico',
        template: 'template.html'
    }),
    new Dotenv({ safe: true, systemvars: true })
  ]
};

================
File: webpack.dev.js
================
const path = require('path');
const webpack = require('webpack');
const { merge } = require('webpack-merge');
const common = require('./webpack.common.js');

const port = 3000;
let publicUrl = `ws://localhost:${port}/ws`;

//only for gitpod
if(process.env.GITPOD_WORKSPACE_URL){
  const [schema, host] = process.env.GITPOD_WORKSPACE_URL.split('://');
  publicUrl = `wss://${port}-${host}/ws`;
}

//only for codespaces
if(process.env.CODESPACE_NAME){
  publicUrl = `wss://${process.env.CODESPACE_NAME}-${port}.preview.app.github.dev/ws`;
}

module.exports = merge(common, {
    mode: 'development',
    devtool: 'cheap-module-source-map',
    devServer: {
        port,
        hot: true,
        allowedHosts: "all",
        historyApiFallback: true,
        static: {
          directory: path.resolve(__dirname, "dist"),
        },
        client: {
          webSocketURL: publicUrl
        },
    },
    plugins: []
});

================
File: webpack.prod.js
================
const { merge } = require('webpack-merge');
const common = require('./webpack.common.js');
const Dotenv = require('dotenv-webpack');
module.exports = merge(common, {
    mode: 'production',
    output: {
        publicPath: './'
    },
    plugins: [
        new Dotenv({
            safe: true,
            systemvars: true
        })
    ]
});
